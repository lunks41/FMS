@model CreditHd;

@{
    ViewData["Title"] = "Add New  Credit -  Credit";
}

@section PageScripts {
    <script src="~/js/common.js"></script>
}

@* ************** Content ************** *@

<div class="row">
    <div class="col-md-12">
        @Html.AntiForgeryToken()
        <div class="card mb-4">
            <h4 class="card-header">
                Add Credit Details
                <div style="float:right">
                    @if (Model.CreditId > 0)
                    {
                        <button class="btn btn-success" onclick="CreateCredit()">Update</button>
                        <a asp-controller="Transactions" asp-action="DeleteCredit" asp-route-eid="@Model.EncId" class="btn btn-danger">Delete</a>
                    }
                    else
                    {
                        <button class="btn btn-success" onclick="CreateCredit()">Save</button>
                    }

                    <a asp-controller="Transactions" asp-action="GetCredit" class="btn btn-primary">Back</a>
                </div>
            </h4>
            <!-- Account -->
            <div class="card-body pt-2 mt-1">
                <div class="row gy-4">
                    <input asp-for="CreditId" hidden />
                    <input asp-for="EncId" hidden />
                    <label>Header</label>

                    <div class="col-md-3">
                        <div class="form-floating form-floating-outline">
                            <input asp-for="CreditNo" class="form-control" type="text" id="txt_creditNo" name="creditNo" readonly />
                            <label for="saleNo">Credit Number</label>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-floating form-floating-outline">
                            <input asp-for="PersonName" class="form-control" type="text" id="txt_personname" name="personname" autofocus />
                            <label for="saleNo">Person Name</label>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-floating form-floating-outline">
                            <select id="ddboatid" asp-for="BoatId" asp-items="ViewBag.BoatsList" class="select2 form-select">
                                <option value="">-- Select --</option>
                            </select>
                            <label for="boat">Boat Name</label>
                        </div>
                    </div>
                </div>

                <br>
                   <div class="row gy-4">

                    <div class="col-md-3">
                        <div class="form-floating form-floating-outline">
                            <input asp-for="TotalCreditAmount" class="form-control" type="number" id="txt_totalcreditamount" name="totalcreditamount" onblur="HeaderAmountCalculation()" readonly/>
                            <label for="totalcreditamount">Credit Amount</label>
                        </div>
                    </div>
                     <div class="col-md-3">
                        <div class="form-floating form-floating-outline">
                            <input asp-for="TotalDebitAmount" class="form-control" type="number" id="txt_totaldebitamount" name="totaldebittamount" onblur="HeaderAmountCalculation()" readonly />
                            <label for="totaldebittamount">Debit Amount</label>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-floating form-floating-outline">
                            <input asp-for="TotalBalanceAmount" class="form-control" type="number" id="txt_totalbalanceamount" name="totalbalanceamount" readonly />
                            <label for="totalbalanceamount">Balance Amount (Person Pay you)</label>
                        </div>
                    </div>


                    <label>Details</label>

                    <div class="col-md-3">
                        <div class="form-floating form-floating-outline">
                            <input class="form-control" type="date" id="txt_PaymentDate" name="PaymentDate" />
                            <label for="PaymentDate">Payment Date</label>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-floating form-floating-outline">
                            <input class="form-control" type="number" id="txt_creditamount" name="creditamount" />
                            <label for="creditamount">Credit Amount (You Pay)</label>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-floating form-floating-outline">
                            <input class="form-control" type="number" id="txt_debitamount" name="debitamount" />
                            <label for="debitamountamount">Debit Amount (Person Pay)</label>
                        </div>
                    </div>
                    <div class="col-md-1" id="SquenceNo">
                        <div class="form-floating form-floating-outline">
                            <input class="form-control" type="number" id="txt_SquenceNo" name="SquenceNo" />
                            <label for="SquenceNo">Squence No</label>
                        </div>
                    </div>
                    <div class="col-md-1" id="SquenceNo" style="display:none">
                        <div class="form-floating form-floating-outline">
                            <input class="form-control" type="number" id="txt_ItemNumber" name="ItemNumber" readonly />
                            <label for="ItemNumber">Item Number</label>
                        </div>
                    </div>
                    <div class="col-md-2 d-flex">
                        <div class="form-floating form-floating-outline">
                            <button type="button" class="btn btn-outline-success tf-icons mdi mdi-plus-box-multiple" onclick="AddCreditDetails()">Add</button>
                            <button type="button" class="btn btn-outline-danger tf-icons mdi mdi-plus-box-multiple" onclick="ClearCreditDetails()">Clear</button>
                        </div>
                    </div>
                </div>

                <br />

                <label>Grid Details</label>

                <br />

                <div id="grid_CreditDetails">
                </div>
            </div>
            <!-- /Account -->

        </div>
    </div>
</div>

@section Scripts {

    <script>

        $(document).ready(function () {
            $("#SquenceNo").hide();
            ClearCreditDetails();
            $("#CreditId").val();
            $("#EncId").val();
            LoadGetCredit();
        });

        function LoadGetCredit() {

            var eid = $("#EncId").val();
            var GridName = 'CreditDetails';
            var Url = '@Url.Action("GetCreditDetailsList", "Transactions", new { area = "" })';
            var PageSize = 20;

            var Columns_properties = [
                { columnName: 'ItemNo', dataType: 'string', width: 130, isHidden: true, islocked: false, iseditable: false },
                { columnName: 'SquenceNo', dataType: 'string', width: 50, title: 'Sr', isHidden: false, islocked: false, iseditable: false },
                { columnName: 'CreditId', isHidden: true, islocked: false, iseditable: false, width: '100px', dataType: 'string', title: 'ID' },
                { columnName: 'CreditNo', isHidden: true, islocked: false, iseditable: false, width: '100px', dataType: 'string', title: 'Number' },
                { columnName: 'PaymentDate', isHidden: false, islocked: false, iseditable: false, width: '100px', dataType: 'date', title: 'Payment Date' },
                 { columnName: 'CreditAmount', isHidden: false, islocked: false, iseditable: false, width: '100px', dataType: 'amount', title: 'Credit Amount (You Pay)' },
                { columnName: 'DebitAmount', isHidden: false, islocked: false, iseditable: false, width: '100px', dataType: 'amount', title: 'Debit Amount (Person Pay)' },
            ]

            var Params = { 'eid': eid };

            var DataFunction = [{ GridHeight: false, template: false, toolbar: false, dataBound: false, save: false, GridColumnTemplate: true }];

            FillUpdatedGrid(Url, Params, GridName, PageSize = 20, Columns_properties, Aggregate = "", DataFunction, ScreenName = "");
        }

        function GridColumnTemplate_CreditDetails(GridData, Tab) {

            var Edit = "<div  class='btn btn-icon btn-primary' onclick=\"EditCreditDt()\" title='Edit'><span class='mdi mdi-pencil'></span></div>";
            var Delete = "<div  class='btn btn-icon btn-danger' onclick=\"DeleteCreditDt()\" title='Delete'><span class='mdi mdi-trash-can-outline'></span></div>";

            var Template = Edit + '  ' + Delete;

            columnsOptions.push({
                field: "",
                title: "Action",
                width: 100,
                filterable: {
                    cell: {
                        enabled: false
                    }
                },
                template: Template
            });
        }

        function EditCreditDt() {
            
            var gridData = $("#grid_CreditDetails").data("kendoGrid");

            var selectedRows = gridData.select();
            selectedRows.each(function (index, row) {
                var selectedItem = gridData.dataItem(row);
                
                //$("#txt_PaymentDate").data("kendoDatePicker").value(selectedItem.PaymentDate);
                $("#txt_PaymentDate").val(formatDate(selectedItem.PaymentDate));
                $("#txt_debitamount").val(selectedItem.DebitAmount);
                $("#txt_creditamount").val(selectedItem.CreditAmount);
                $("#txt_SquenceNo").val(selectedItem.SquenceNo);
                $("#txt_ItemNumber").val(selectedItem.ItemNo);
            });

            $("#SquenceNo").show();
            $("#txt_SquenceNo").show();
        }

        function DeleteCreditDt() {

            var grid = $("#grid_CreditDetails").data("kendoGrid");
            var dataSource = grid.dataSource;
            var GridLength = dataSource.data().length;

            var rows = grid.select();
            var selectedItem = grid.dataItem(rows);
            grid.dataSource.remove(selectedItem);

            HeaderAmountCalculation();
        }

        function HeaderAmountCalculation() {
            
            var Debitamt = 0, Creditamt = 0, TotalAMT = 0;
            var creditAmt = parseFloat($("#txt_creditamount").val() == '' ? 0 : $("#txt_creditamount").val());

            var grid = $("#grid_CreditDetails").data("kendoGrid");

            if (grid != undefined) {
                var gridData = grid.dataSource.data();
                
                for (var i = 0; i < gridData.length; i++) {
                    
                    var uid = gridData[i].uid;
                    var row = grid.table.find("tr[data-uid='" + uid + "']");

                    var DebitAmount = $(row).find("[data-field='DebitAmount']").html();
                    var CreditAmount = $(row).find("[data-field='CreditAmount']").html();

                    if (DebitAmount != undefined) {
                        DebitAmount = (DebitAmount.replace(',', ''));
                        DebitAmount = parseFloat(DebitAmount);
                    } else {
                        DebitAmount = gridData[i].DebitAmount;
                    }

                    if (CreditAmount != undefined) {
                        CreditAmount = (CreditAmount.replace(',', ''));
                        CreditAmount = parseFloat(CreditAmount);
                    } else {
                        CreditAmount = gridData[i].CreditAmount;
                    }

                    Debitamt = (parseFloat(Debitamt) + parseFloat(DebitAmount)).toFixed(2);
                    Creditamt = (parseFloat(Creditamt) + parseFloat(CreditAmount)).toFixed(2);
                }

                $("#txt_totaldebitamount").val(parseFloat(Debitamt).toFixed(2));
                $("#txt_totalcreditamount").val(parseFloat(Creditamt).toFixed(2));
            }

            var txt_balanceamount = (parseFloat(Debitamt) - parseFloat(Creditamt)).toFixed(2);
            if (txt_balanceamount.includes('-'))
                txt_balanceamount = parseFloat(txt_balanceamount.replace('-', ''));//To Covert into +ve

            $("#txt_totalbalanceamount").val(txt_balanceamount);
        }

        function ValidateCreditDetails() {

            var Valid = true;
            var paymentdate = $("#txt_PaymentDate").val();
            var debitamount = $("#txt_debitamount").val();
            var creditamount = $("#txt_creditamount").val();

            if (paymentdate == "") {
                toastr.warning('Please Enter Payment Date.');
                Valid = false;
                $("#txt_PaymentDate").focus();
            } else if (debitamount == "") {
                toastr.warning('Please Enter Debit amount.');
                Valid = false;
                $("#txt_debitamount").focus();
            } else if (creditamount == "") {
                toastr.warning('Please Enter Credit Amount.');
                Valid = false;
                $("#txt_creditamount").focus();
            }

            return Valid;
        }

        function AddCreditDetails() {

            if (ValidateCreditDetails()) {
                
                var lengthgrid = 0;
                var INVOICE_ID = 0;
                var grid = undefined;
                grid = $("#grid_CreditDetails").data("kendoGrid");
                if (grid == undefined) {
                    grid = $("#grid_CreditDetails").kendoGrid().data("kendoGrid");
                    lengthgrid = 0;
                }
                else {
                    lengthgrid = grid.dataSource.data().length;
                }
                var dataSource = $("#grid_CreditDetails").data().kendoGrid.dataSource;
                var DataAdd = [];
                
                for (var i = 0; i < lengthgrid; i++) {

                    DataAdd.push({
                        SquenceNo: dataSource.data()[i].SquenceNo,
                        ItemNo: dataSource.data()[i].ItemNo,
                        CreditId: dataSource.data()[i].CreditId,
                        CreditNo: dataSource.data()[i].CreditNo,
                        PaymentDate: dataSource.data()[i].PaymentDate,
                        DebitAmount: dataSource.data()[i].DebitAmount,
                        CreditAmount: dataSource.data()[i].CreditAmount,
                    });
                }

                if ($("#txt_SquenceNo").val() == '') {

                    DataAdd.push({
                        SquenceNo: lengthgrid + 1,
                        ItemNo: lengthgrid + 1,
                        CreditId: INVOICE_ID == 0 ? lengthgrid + 1 : INVOICE_ID,
                        CreditNo: "",
                        PaymentDate: $("#txt_PaymentDate").val(),
                        DebitAmount: $("#txt_debitamount").val(),
                        CreditAmount: $("#txt_creditamount").val()
                    });
                }
                else {

                    objIndex = DataAdd.findIndex((obj => obj.ItemNo == parseInt($("#txt_SquenceNo").val())));
                    
                    DataAdd[objIndex].SquenceNo = $("#txt_SquenceNo").val();
                    DataAdd[objIndex].ItemNo = $("#txt_ItemNumber").val();
                    DataAdd[objIndex].CreditId = INVOICE_ID == 0 ? lengthgrid + 1 : INVOICE_ID;
                    DataAdd[objIndex].CreditNo = "";
                    DataAdd[objIndex].PaymentDate = $("#txt_PaymentDate").val();
                    DataAdd[objIndex].DebitAmount = $("#txt_debitamount").val();
                    DataAdd[objIndex].CreditAmount = $("#txt_creditamount").val();
                }
            }

            var Columns_properties = [
                { columnName: 'ItemNo', dataType: 'string', width: 130, isHidden: true, islocked: false, iseditable: false },
                { columnName: 'SquenceNo', dataType: 'string', width: 50, title: 'Sr', isHidden: false, islocked: false, iseditable: false },
                { columnName: 'CreditId', isHidden: true, islocked: false, iseditable: false, width: '100px', dataType: 'string', title: 'ID' },
                { columnName: 'CreditNo', isHidden: true, islocked: false, iseditable: false, width: '100px', dataType: 'string', title: 'Number' },
                { columnName: 'PaymentDate', isHidden: false, islocked: false, iseditable: false, width: '100px', dataType: 'date', title: 'PaymentDate' },
                 { columnName: 'CreditAmount', isHidden: false, islocked: false, iseditable: false, width: '100px', dataType: 'amount', title: 'Credit Amount (You Pay)' },
                { columnName: 'DebitAmount', isHidden: false, islocked: false, iseditable: false, width: '100px', dataType: 'amount', title: 'Debit Amount (Person Pay)' },
            ]

            var DataFunction = [{ GridHeight: false, template: false, toolbar: false, dataBound: false, save: false, GridColumnTemplate: true }];

            FillUpdatedGrid(Url = '', Params = '', GridName = 'CreditDetails', PageSize = '', Columns_properties, Aggregate = '', DataFunction, ScreenName = "Credit", JSON.stringify(DataAdd));

            $('#grid_CreditDetails').show();
            ClearCreditDetails();
            HeaderAmountCalculation();

        }

        function ClearCreditDetails() {

            $("#txt_PaymentDate").val('');
            $("#txt_debitamount").val('0.00');
            $("#txt_creditamount").val('0.00');
            $("#txt_SquenceNo").val('');
            $("#txt_ItemNumber").val('');
            $("#SquenceNo").hide();
        }

        function CreateCredit() {

            if (ValidateCredit()) {

                if (parseInt($("#txt_TotalAmt").val()) != 0) {

                    var eid = $("#EncId").val();

                    var JsonCredit = {
                        CreditId: $("#CreditId").val(),
                        CreditNo: $("#txt_creditNo").val(),
                        BoatId: $("#ddboatid").val(),
                        PersonName: $("#txt_personname").val(),
                        TotalDebitAmount: $("#txt_totaldebitamount").val(),
                        TotalCreditAmount: $("#txt_totalcreditamount").val(),
                        TotalBalanceAmount: $("#txt_totalbalanceamount").val(),
                    }

                    var JsonString = JSON.stringify(JsonCredit);

                    var grid = $("#grid_CreditDetails").data("kendoGrid");

                    if (grid != undefined) {
                        var data = grid.dataSource.data().length;
                        if (data > 0) {
                            var gridData = grid.dataSource.data();
                            var JsonDetails = JSON.stringify(gridData);
                        } else {
                            var JsonDetails = '';
                        }
                    } else { 
                        var JsonDetails = '';
                    }

                    var Url = '@Url.Action("DefineCredit", "Transactions")';
                    var Params = { 'eid': eid, 'JsonString': JsonString, 'JsonDetails': JsonDetails };

                    $.ajax({
                        type: "POST",
                        url: Url,
                        data: Params,
                        success: function (e) {
                            response = JSON.parse(e)
                            if (response.Id > 0) {
                                toastr.success(response.Msg);
                            } else {
                                toastr.error(response.Msg);
                            }
                        },
                    })
                }
            }
        }

        function ValidateCredit() {

            var Valid = true;

            var SaleNo = $("#ddsaleid").val();
            var Personname = $("#txt_personname").val();
            var TotalAmt = $("#txt_totalamount").val();

            if (SaleNo == "" || SaleNo == "0") {
                toastr.warning('Please select Sales Number');
                Valid = false;
            } else if (Personname == "") {
                toastr.warning('Please Enter Person Name');
                Valid = false;
                $("#txt_personname").focus();
            }

            return Valid;
        }

        function formatDate(date) {
            var d = new Date(date),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear();

            if (month.length < 2)
                month = '0' + month;
            if (day.length < 2)
                day = '0' + day;

            return [year, month, day].join('-');
        }
    </script>

}



